/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "oauth.h"
#include "utils/utils.h"
#include <bits/stdc++.h>
#include <fstream>
#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>

using namespace std;

#define HOST "127.0.0.1"
#define MAX_LINE_SIZE 50
#define MAX_USER_ID_LENGTH 50
#define MAX_RESOURCE_SIZE 50

void authorization_1(char *host) {
	CLIENT *clnt;
	char **result_1;
	char *auth_1_arg;
	acces_token_struct *result_2;
	access_token_req access_1_arg;
	char **result_3;
	action_req validate_action_1_arg;
	auth_token_struct *result_4;
	auth_token_struct approve_req_token_1_arg;

	auth_1_arg = (char *)malloc(20 * sizeof(char));
	strcpy(auth_1_arg, "vrajeala mea");

#ifndef DEBUG
	clnt = clnt_create(host, AUTHORIZATION, OAUTH, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror(host);
		exit(1);
	}
#endif /* DEBUG */

	result_1 = auth_1(&auth_1_arg, clnt);
	if (result_1 == (char **)NULL) {
		clnt_perror(clnt, "call failed");
	}
	// result_2 = access_1(&access_1_arg, clnt);
	// if (result_2 == (acces_token_struct *)NULL) {
	// 	clnt_perror(clnt, "call failed");
	// }
	// result_3 = validate_action_1(&validate_action_1_arg, clnt);
	// if (result_3 == (char **)NULL) {
	// 	clnt_perror(clnt, "call failed");
	// }
	// result_4 = approve_req_token_1(&approve_req_token_1_arg, clnt);
	// if (result_4 == (auth_token_struct *)NULL) {
	// 	clnt_perror(clnt, "call failed");
	// }
#ifndef DEBUG
	clnt_destroy(clnt);
#endif /* DEBUG */
}

operation *process_line(string line) {
	vector<string> v;

	stringstream ss(line);
	int idx = 0;
	operation *op = (operation *)malloc(sizeof(operation));
	op->user_id = (char *)malloc(MAX_USER_ID_LENGTH * sizeof(char));
	op->resource = (char *)malloc(MAX_RESOURCE_SIZE * sizeof(char));
	while (ss.good()) {
		string substr;
		getline(ss, substr, ',');
		switch (idx) {
		case 0:
			strcpy(op->user_id, substr.c_str());
			break;
		case 1:
			op->operation_type = string_to_operation_type(substr);
			break;
		case 2:
			if (op->operation_type == REQUEST) {
				op->automatic_refresh = stoi(substr);
			} else {
				strcpy(op->resource, substr.c_str());
			}
			break;
		default:
			break;
		}
		idx++;
	}
	return op;
}

void read_operations(ifstream &input_file) {
	string line;
	while (input_file >> line) {
		operation *op = process_line(line);
		printClientOperation(op);
	}
}

int main(int argc, char *argv[]) {
	char *operations_file;

	if (argc < 2) {
		printf("usage: %s <fisier_operatii>\n", argv[0]);
		exit(1);
	}

	operations_file = argv[1];

	ifstream input_file(operations_file);
	read_operations(input_file);

	authorization_1(HOST);
	exit(0);
}
